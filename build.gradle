// Multi Module Project
buildscript {
	ext {
		springBootVersion = '3.4.5'
		springdocVersion = '2.3.0'
		jjwtVersion = '0.12.6'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'jacoco-report-aggregation'
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.13'
}

dependencies {
	jacocoAggregation project(':api-module')
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	group = 'hongik.triple'
	version = '0.0.1-SNAPSHOT'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies { // 모든 하위 모듈에 추가 될 의존성 목록입니다.
		// Basic Dependency
		implementation 'org.springframework.boot:spring-boot-starter'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// Lombok Dependency
		implementation 'org.projectlombok:lombok'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
	}

	test {
		useJUnitPlatform()
		if(project.plugins.hasPlugin('jacoco')) {
			finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
		}
	}

	jacoco {
		toolVersion = '0.8.13'
	}

	jacocoTestReport {
		dependsOn test

		reports {
			xml.required = true
			csv.required = false
			html.required = true
		}
	}
}

tasks.register("jacocoRootReport", JacocoReport) {
	dependsOn = subprojects.collect { it.tasks.named("test") }

	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}

	executionData.setFrom(files(subprojects.collect {
		file("${it.layout.buildDirectory.get().asFile}/jacoco/test.exec")
	}))

	sourceDirectories.setFrom(files(subprojects.collect {
		file("${it.projectDir}/src/main/java")
	}))

	classDirectories.setFrom(files(subprojects.collect {
		fileTree("${it.layout.buildDirectory.get().asFile}/classes/java/main") {
			include '**/application/**'
		}
	}))
}